server.port=6002
server.servlet.context-path=/uc
spring.application.name=uc

spring.session.store-type = none

#logging.level.root:DEBUG

#json
spring.jackson.serialization.indent_output=true
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8

##################### Kafka ##########################
# 可用于配置Kafka集群链接，用逗号分隔
spring.kafka.bootstrap-servers=62.234.59.112:9092
###################### 消费者配置开始 ######################
# 如果为true，则消费者得偏移量将在后台定期提交，默认值为true
spring.kafka.consumer.enable-auto-commit=true
# 链接超时时间
spring.kafka.consumer.session.timeout.ms=6000
# 如果'enable.auto.commit'为true,则消费者偏移自动提交给Kafka得频率(以毫秒为单位),默认值为5000
spring.kafka.consumer.auto-commit-interval=5000
# 当Kafka中没有初始偏移量或者服务器上不再存在当前偏移量得时候该怎么办，默认值为latest，表示自动将便宜重置为最新得偏移量
# 没有初始化的offset时，可以设置以下三种情况：（默认：latest）
# earliest
# 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
# latest
# 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
# none
# topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
spring.kafka.consumer.auto-offset-reset=latest
# 设置消费线程数
spring.kafka.consumer.concurrency=10
# 用于标识此使用者所属得使用者租得唯一字符串
spring.kafka.consumer.group-id=test-consumer-group
# 启用重试失败得发送次数
spring.kafka.producer.retries=0
# 一次调用poll()操作时返回得最大记录数，默认值为500
spring.kafka.consumer.max-poll-records=500
###################### 消费者配置结束 ######################
# 每当多个记录被发送到同一分区时，生产者讲尝试将记录一起批量处理为更少得请求，
# 这有助于提升客户端和服务器上得性能，此配置控制默认批量大小(以字节为单位)
spring.kafka.producer.batch-size=16384
spring.kafka.producer.linger=1
# 生产者可用于缓冲等待发送到服务器得记录得内存字节数，默认值为33554432
spring.kafka.producer.buffer-memory=33554432

#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

